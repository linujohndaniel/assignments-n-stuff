1. The flags are explained below:

-g asks the compiler to retain the debugging symbols and information from the source level inside the executable. This is useful in the case where the program crashes and produces a core file, or if it was deliberately ended by an OS command like kill or if there is explicit code in the executable that is run which dumps the core. If in this case -g flag is used then the debugger will read the symbol information and check it with the core.

-Wall is short for warn all. It asks the compiler to display all the generated warnings. It is generally used to improve code writing style and thus generate better code.

-ansi is a flag that is synonymous with the -std=c89 flag. It asks the compiler to implement the ANSI language option. It turns off certain language features which are incompatible with the ANSI standard.

-pedantic is a flag that is used in conjunction with the -ansi flag. It tells the compiler to strictly adhere to the ANSI standard and not compile any code that is not ANSI compliant.

There are three kinds of flag options used in compilation depending on the language used. They are CFLAGS, CPPFLAGS and CXXFLAGS. CFLAGS is used to pass compilation options to the compiler while compiling source code written in C. CPPFLAGS are the flags which are passed to the C preprocessor and CXXFLAGS are the flags which are passed to the compiler while compiling source code written in C++.

Thus, replacing CFLAGS with CXXFLAGS will theoretically make the flags only applicable to the compilation of C++ source code files, instead of these flags being used on the C source code files. But since the flags in the given makefile do not cause a visual difference in the compilation of the code, the change is unnoticed.

2. It is the octal dump of the D1.dsk file. Importing the contents of the d1.txt file into a hex editor we can see the contents of the D1.dsk file which contains the word "hello" repeated over a number of times.

3. The indent command is used to format source code files in certain formatting styles that are specified by the indent executable. Now let us look at what the "indent -kr -i2 -pmt *.C *.h" command does.

The -kr flag is used to specify that the Kernighan and Ritchie formatting style is to be utilized. 
The -i2 flag is used to set the indentation level to 2
The -pmt flag is used to preserve the modification time and the access time of the file.
The *.C *.h part specifies that all the C files and header files are to be indented this way.

So, in effect, this specific command indents all header and C files with the Kernighan and Ritchie style, with indentation level set to 2 and with no change in modification and access times.

4. These functions belong to the category of file management and manipulation. They are described below:

fopen: This is used to open a file to perform operations such as reading from the file and writing to the file.
fclose: This is used to close the file that was previously opened.
fread: This is used to read the contents of a file to a memory space referenced by a pointer that is passed to the function.
fwrite: This is used to write the contents of a memory space referenced by a pointer to the file.
fstat: This is used to obtain information about a file which is pointed to by the file descriptor passed to the fstat function.
fscanf: This function is used to read the content of a file to a buffer variable, both of which are pointed to by their respective pointer variables that are passed as arguments to the function.
fprintf: This function is used to write the content of a buffer variable to a file, both of which are pointed to by their repsective pointer variables that are passed as arguments to the function.
printf: 
sprintf:

5. The five standard library routines are:





The five system calls are:







6. The program contains an infinite for loop in which the shell prompt is displayed and then the user inputs the command. If the command is a comment i.e. if it starts with "#", it is ignored and the next iteration is done. If the command is empty, it is ignored and the next iteration is done. If the command starts with a "!" then it will pass the command to the system which will execute the command. But if the command does not fulfill any of these, then it will search the list of predefined commands to see if the input matches any one of those. If it does, then the corresponding command is executed. The list of defined commands also includes an exit command which terminates the program. Thus, if one were to use the exit command, then the doQuit() function is called, which releases the disks in use and then terminates the program with an exit(0) command.

7. strtok() is a string tokenizer function in the standard C library. The use of this function is not recommended because it poses some security risks i.e. programs that contain strtok() function can be exploited as an entry point for a buffer overflow attack. This is because strtok() does not set any limit on the maximum address space of the string variable, thus enabling it to write over memory space outside of the string's storage space. This is replaced by strtok_s() function which adds two parameters, a maximum limit of space and ptr which eliminates the static variable state which can provide strtok a way to re-enter the memory space.

gets() is a function that is used to read a line/string from the user i.e. the standard input and stores it into a string variable that is pointed to by the character pointer that is passed as the argument to the gets() function. Even though the gets() function is a staple function for most older programs that work with strings, it is recommended that developers shy away from using the function and use the fgets() function instead. This is because the gets() function, like the strtok() function is vulnerable to a buffer overflow attack due to the fact that it imposes no limits on the size of the buffer that it uses, thereby exceeding the buffer limit and causing a buffer overflow. This exactly was the cause of the Morris worm, which was one of the most important computer viruses in history. It exploited this weakness of the gets() function in the fingerd daemon to modify the return address of the current activation record in the program stack. So when it returned, it gave control to an execv() function which replaced the process with a shell which gave the attacker remote access to the vulnerable machine.

8. The file descriptor in the program, or in any program for that matter, is an integer that can contain one of three values; 0, 1 and 2.
0 represents standard input, 1 represents standard output, and 2 represents standard error (stderr) stream. There are the regular file descriptor values. In case of an error, the file descriptor will have another value, and thus will not work correctly. This is why a check is implemented for the fd variable, which is a file descriptor.

9. The simDisk.c file contains the given code snippet in which there is a check statement present in which the size of the simulated disk is equal to the product of the sectors per disk and the bytes per sector. 
We are asked to justify the code snippet. 
Firstly, the simDisk.c file contains the code for simulating a physical disk as a file. The storage space in a physical disk is divided into sectors of equal size. So, to assess the total size of the drive, we can use the formula size=n*b where n is the number of sectors and b is the amount of bytes that a sector possesses.
Now the SimDisk function is the one that contains the code snippet in question. This function creates a simulated disk if one does not exist and thus undergoes the process as given:

The variable exists is set to 0.
Now the buffer statBuf is intialized.
If statBuf's size is equal to the product of sectors per disk and the 
10. 
