Answers:

1. Environment variables in Linux are used to store certain information about the system and the way that it should operate, which are then communicated to running programs (especially ones that are run in a shell interpreter) to provide necessary information about the system. These environment variables are stored in Linux as key-value pairs, in which the key signifies what type of information is contained inside, and the value signifies the actual information that is stored in the key-value pair. Environment variables play a significant role in most operating systems, including Linux. They provide an efficient way to share system information and configuration details between programs running on the system. These variables provide processes insight into the kind of environment they are running in, and thus these process can suit themselves to better adapt to the systems that they run on.

1.a.

Code:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("The current user is %s.\n",getenv("USER"));
    printf("The home directory of the current user is %s.\n",getenv("HOME"));
    printf("The present working directory of this terminal is %s.\n",getenv("PWD"));
    printf("The paths set in the $PATH variable is %s.\n",getenv("PATH"));
}

Output:

The current user is betrant.
The home directory of the current user is /home/betrant.
The present working directory of this terminal is /home/betrant/Desktop/assignments-n-stuff/assignments/ossec_two/solution.
The paths set in the $PATH variable is /home/betrant/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games.

1.b.

Code:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    char *rootkey = "ROOT";
    char *rootval = "root";

    printf("The current user is %s.\n",getenv("USER"));
    printf("The home directory of the current user is %s.\n",getenv("HOME"));
    printf("The present working directory of this terminal is %s.\n",getenv("PWD"));
    printf("The paths set in the $PATH variable is %s.\n",getenv("PATH"));

    setenv(rootkey,rootval,1);

    printf("The newly set variable is ROOT and its values is %s.\n",getenv("ROOT"));
}

Output:

The current user is betrant.
The home directory of the current user is /home/betrant.
The present working directory of this terminal is /home/betrant/Desktop/assignments-n-stuff/assignments/ossec_two/solution.
The paths set in the $PATH variable is /home/betrant/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games.
The newly set variable is ROOT and its values is root.

2.a.

Code:

#include <stdio.h>
#include <pthread.h>

void *greet() {
	printf("Hello, world!\n");
}

int main() {

	pthread_t tid;

	printf("A new thread will now greet you.\n");
	
	pthread_create(&tid, NULL, greet, NULL);
	pthread_join(tid, NULL);

	printf("The thread is now dead!\n");
	return 0;

}

Output:

A new thread will now greet you.
Hello, world!
The thread is now dead!

2.b.

Code:

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutexvar;

void *printvar(void *args) {
	pthread_mutex_lock(&mutexvar);
	int *getvar;
	getvar = (int *)args;
	printf("The value you passed is %d.\n", *getvar);
	pthread_mutex_unlock(&mutexvar);
	pthread_exit(NULL);
}

int main() {

	int *passptr;
	pthread_t tid;
	int cont;
	
	cont = 1;
	while(cont == 1)
	{
		printf("Enter the number you want to pass to the thread:");
    	pthread_mutex_lock(&mutexvar);
		passptr = (int *)malloc(sizeof(passptr));
		scanf("%d", passptr);
    	pthread_mutex_unlock(&mutexvar);
		pthread_create(&tid, NULL, printvar, (void *)passptr);
		pthread_join(tid, NULL);
		printf("\nDo you want to continue?\nEnter 1 to continue, or any other number to exit.");
		scanf("%d",&cont);
	}
	
	return 0;
}

Output:

Enter the number you want to pass to the thread:12
The value you passed is 12.

Do you want to continue?
Enter 1 to continue, or any other number to exit.1
Enter the number you want to pass to the thread:121
The value you passed is 121.

Do you want to continue?
Enter 1 to continue, or any other number to exit.4

3.a. The program generates the following output:

ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

The program starts with the main/parent thread (i.e. the thread in which the main() function runs). It suddenly follows up with the initialization of a pthread_t instance variable which is then used to link itself with a newly created thread (which is created using the pthread_create function). This newly created thread is assigned to run the print_xs function. However, before it starts the execution of said function in this thread, the execution of the newly created thread is blocked by the pthread_mutex_lock function that is called by the main thread due to the fact that the print_xs function attempts to lock the mutex variable that is already blocked, thus effectively blocking it from execution till the variable is unlocked. Now the thread cannot run till another thread unlocks the mutex variable with a pthread_mutex_unlock function call. So, the main thread now proceeds to execute the print_os() function, which then prints the character 'o' a thousand times. After the function print_os completes execution in the main thread, the main function continues in the main thread with the pthread_mutex_unlock call, unlocking the mutex variable in the program. Now the child thread can continue execution since the mutex variable is now unlocked and can be locked by the child thread. Now the print_xs function continues in the child thread, which prints the character 'x' a thousand times. Then it unlocks the mutex variable with a pthread_mutex_unlock function call. With this, the second thread exits, and returns to the main thread, which exits as well.

4.

Code:

#include <stdio.h>
#include <semaphore.h>
#include <pthread.h>

int buf;
sem_t m,t;

void *product (void *args) {
    
    int temp;
    
    sem_wait(&t);
    temp = buf;
    sem_post(&m);
    
    sem_wait(&t);
    buf *= temp;
    sem_post(&m);

}

int main() {

    pthread_t tid;
    int i;

    sem_init(&t, 0, 0);
    sem_init(&m, 0, 1);

    pthread_create(&tid, NULL, product, NULL);
    for (i=0 ; i<2 ; i++) {
        sem_wait(&m);
        printf("Enter the operand:");
        scanf("%d", &buf);
        sem_post(&t);
    }

    sem_wait(&m);
    printf("\nThe product is %d.",buf);

}

Output:

Enter the operand:123
Enter the operand:11

The product is 1353.